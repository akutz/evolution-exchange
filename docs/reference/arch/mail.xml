<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="ximian-connector-mail">
<refmeta>
<refentrytitle>Mail Architecture</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XIMIAN-CONNECTOR Library</refmiscinfo>
</refmeta>

<refnamediv></refnamediv>

<refsect3>
<title>Mail-related WebDAV properties</title>

<para>
    Most mail-related WebDAV properties are in either the
    <literal>urn:schemas:mailheader:</literal> or
    <literal>urn:schemas:httpmail:</literal> namespaces. In fact, many
    properties are available in <emphasis>both</emphasis> of those
    namespaces. Every RFC 822 header in the message is copied
    literally to a property in the 
    <literal>urn:schemas:mailheader:</literal> namespace with the same
    name. <literal>urn:schemas:httpmail:</literal> on the other hand
    has only a subset of headers, but in a more processed form. (For
    example, if there are non-ASCII characters in the subject of a
    message, <literal>urn:schemas:httpmail:subject</literal> will have
    a UTF-8 representation of the subject, while
    <literal>urn:schemas:mailheader:subject</literal> will have the
    MIME-encoded ASCII representation.)
</para>

<para>
    A few important mail-related WebDAV properties are:
</para>

<itemizedlist>
    <listitem>
	<para>
	    <literal>urn:schemas:httpmail:read</literal> (aka
	    <literal>E2K_PR_HTTPMAIL_READ</literal>),
	    <literal>urn:schemas:httpmail:hasattachment</literal> (aka
	    <literal>E2K_PR_HTTPMAIL_HAS_ATTACHMENT</literal>), and
	    <literal>PR_ACTION_FLAG</literal>, which are used to
	    generate the Camel message flags.
	</para>
    </listitem>
    <listitem>
	<para>
	    <literal>urn:schemas:httpmail:messageflag</literal> (aka
	    <literal>E2K_PR_HTTPMAIL_MESSAGE_FLAG</literal>),
	    <literal>urn:schemas:mailheader:reply-by</literal> (aka
	    <literal>E2K_PR_MAILHEADER_REPLY_BY</literal>), and
	    <literal>urn:schemas:mailheader:completed</literal> (aka
	    <literal>E2K_PR_MAILHEADER_COMPLETED</literal>),
	    to determine "flag for followup" information.
	</para>
    </listitem>
    <listitem>
	<para>
	    <literal>DAV:getcontentlength</literal> (aka
	    <literal>E2K_PR_DAV_CONTENT_LENGTH</literal>), which tells
	    the message size.
	</para>
    </listitem>
</itemizedlist>

</refsect3>

<refsect3>
<title>MIME messages</title>

<para>
    Normal <literal>message/rfc822</literal> messages delivered by
    SMTP, or copied into the folder with a <command>PUT</command> (eg,
    by Connector) are the easiest type of mail item to deal with.
</para>

<para>
    The <literal>PR_TRANSPORT_MESSAGE_HEADERS</literal> property of a
    real MIME message contains the complete MIME structure of the
    message with none of the actual content. (Eg, all of the RFC822
    and MIME headers, plus multipart boundary delimeters.) This can be
    used to create most of the summary information for a message.
</para>

</refsect3>

<refsect3>
<title>MAPI messages</title>

<para>
    Messages sent by other local users using
    <application>Outlook</application>, and some messages generated by
    <application>Exchange</application> itself, are not represented as
    MIME messages internally. While
    <application>Exchange</application> will fake up MIME headers if
    you <command>GET</command> the message, these messages don't have
    a <literal>PR_TRANSPORT_MESSAGE_HEADERS</literal> property, so to
    create summary information, we have to fetch
    <literal>urn:schemas:mailheader:</literal> properties and fake up
    the headers from there.
</para>

<para>
    A few types of MAPI messages get additional special handling:
</para>

<itemizedlist>
    <listitem>
	<para>
	    Delegated meeting requests
	</para>

	<para>
	    When you set up your delegates to get copies of your
	    meeting requests, Exchange mangles the
	    <literal>message/rfc822</literal> body in various ways.
	    (In Connector, <link
	    linkend="mail-util-demangle-delegated-meeting"><function>mail_util_demangle_delegated_meeting</function></link>
	    fixes things for us.)
	</para>
    </listitem>

    <listitem>
	<para>
	    Sticky notes
	</para>

	<para>
	    Technically, these aren't in mail folders, but they're
	    handled by the mail code. This is a silly hack because I
	    was bored one day. If the folder is a stickynotes folders
	    instead of a mail folder, Connector fetches some
	    additional properties and uses <link
	    linkend="mail-util-stickynote-to-rfc822"><function>mail_util_stickynote_to_rfc822</function></link>
	    to make an HTML message simulating the stickynote.
		</para>
    </listitem>
</itemizedlist>

</refsect3>

<refsect3>
<title>Non-mail Documents</title>

<para>
    Public folders that are not calendar, contact, or task folders are
    treated as mail folders by default, but are sometimes used for
    things other than mail, such as storing
    <application>Word</application> documents.
</para>

<para>
    These objects have basically no email properties at all, and when
    you <command>GET</command> the bodies, they're
    <literal>application/x-msword</literal> or whatever instead of
    <literal>message/rfc822</literal>.
</para>

<para>
    Sometimes these items will have a
    <literal>PR_INTERNET_FREE_DOC_INFO</literal> property that
    contains a <literal>Content-Type</literal> header, but not always.
    So in that case, we get the
    <literal>E2K_PR_DAV_CONTENT_TYPE</literal> and make
    <literal>Content-*</literal> headers ourselves. Then we fake up
    the rest of the headers to make the document look like an email
    message with an attached document.
</para>

</refsect3>

</refentry>
