<!-- ##### SECTION Title ##### -->
E2kRule

<!-- ##### SECTION Short_Description ##### -->
Exchange server-side rules

<!-- ##### SECTION Long_Description ##### -->
<para>
e2k-rule contains functions for handling Exchange server-side rules.
</para>

<note><para>
This code is not heavily tested. It is possible that some of the
information in this file about how server-side rules work is wrong.
</para></note>

<!-- ##### SECTION See_Also ##### -->
<para>
#E2kRestriction, #E2kAction
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT E2kRule ##### -->
<para>
A single server-side rule.
</para>

@name: Name of the rule (UTF-8)
@sequence: The rule's sequence number. Lower sequence numbers are
evaluated first. There may be gaps in rule numbering in a folder.
@state: A combination of #E2kRuleState values
@user_flags: Always 0?
@level: Always 0?
@condition_lcid: Locale ID for @condition. (Not clear what effect this
has.)
@condition: the condition that causes @actions to be triggered
@actions: an array of #E2kAction to take if @condition is met
@provider: the rule provider that created this rule
@provider_data: provider-specific data.

<!-- ##### STRUCT E2kRules ##### -->
<para>
The complete list of rules for a folder.
</para>

@version: Always 2?
@codepage: A Windows codepage. Always 1252 in my rules, though the
strings seem to actually be Unicode-encoded rather than cp-1252...
@rules: an array of #E2kRule.

<!-- ##### ENUM E2kRuleState ##### -->
<para>
Flags for a rule.
</para>

@E2K_RULE_STATE_DISABLED: Rule is disabled (cannot be used with any
other flags).
@E2K_RULE_STATE_ENABLED: Rule is enabled
@E2K_RULE_STATE_ERROR: ?
@E2K_RULE_STATE_ONLY_WHEN_OOF: Rule only runs when user is Out of Office
@E2K_RULE_STATE_KEEP_OOF_HISTORY: ? (presumably means "only trigger
this rule once per user")
@E2K_RULE_STATE_EXIT_LEVEL: Skip further rule processing
@E2K_RULE_STATE_CLEAR_OOF_HISTORY: ?

<!-- ##### FUNCTION e2k_rules_from_binary ##### -->
<para>

</para>

@rules_data: 
@Returns: 
<!-- # Unused Parameters # -->
@ba: 


<!-- ##### FUNCTION e2k_rules_to_binary ##### -->
<para>

</para>

@rules: 
@Returns: 


<!-- ##### FUNCTION e2k_rules_to_xml ##### -->
<para>

</para>

@rules: 
@Returns: 


<!-- ##### FUNCTION e2k_rules_free ##### -->
<para>

</para>

@rules: 


<!-- ##### FUNCTION e2k_rule_free ##### -->
<para>

</para>

@rule: 


<!-- ##### STRUCT E2kRuleProp ##### -->
<para>
A combination of a WebDAV property name and its corresponding MAPI
proptag, so that different parts of the code can use which
representation is more convenient.
</para>

@name: the property name
@proptag: the MAPI proptag (or 0 if @name is not in the MAPI proptag namespace)

<!-- ##### FUNCTION e2k_rule_prop_set ##### -->
<para>

</para>

@prop: 
@propname: 


<!-- ##### STRUCT E2kPropValue ##### -->
<para>
A property/value pair.
</para>

@prop: the property
@type: the type of @value
@value: the value

<!-- ##### FUNCTION e2k_rule_append_proptag ##### -->
<para>

</para>

@ba: 
@prop: 


<!-- ##### FUNCTION e2k_rule_extract_proptag ##### -->
<para>

</para>

@ptr: 
@len: 
@prop: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_append_propvalue ##### -->
<para>

</para>

@ba: 
@pv: 


<!-- ##### FUNCTION e2k_rule_extract_propvalue ##### -->
<para>

</para>

@ptr: 
@len: 
@pv: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_free_propvalue ##### -->
<para>

</para>

@pv: 


<!-- ##### FUNCTION e2k_rule_write_uint32 ##### -->
<para>

</para>

@ptr: 
@val: 


<!-- ##### FUNCTION e2k_rule_append_uint32 ##### -->
<para>

</para>

@ba: 
@val: 


<!-- ##### FUNCTION e2k_rule_read_uint32 ##### -->
<para>

</para>

@ptr: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_extract_uint32 ##### -->
<para>

</para>

@ptr: 
@len: 
@val: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_write_uint16 ##### -->
<para>

</para>

@ptr: 
@val: 


<!-- ##### FUNCTION e2k_rule_append_uint16 ##### -->
<para>

</para>

@ba: 
@val: 


<!-- ##### FUNCTION e2k_rule_read_uint16 ##### -->
<para>

</para>

@ptr: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_extract_uint16 ##### -->
<para>

</para>

@ptr: 
@len: 
@val: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_append_byte ##### -->
<para>

</para>

@ba: 
@val: 


<!-- ##### FUNCTION e2k_rule_extract_byte ##### -->
<para>

</para>

@ptr: 
@len: 
@val: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_append_string ##### -->
<para>

</para>

@ba: 
@str: 


<!-- ##### FUNCTION e2k_rule_extract_string ##### -->
<para>

</para>

@ptr: 
@len: 
@str: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_append_unicode ##### -->
<para>

</para>

@ba: 
@str: 


<!-- ##### FUNCTION e2k_rule_extract_unicode ##### -->
<para>

</para>

@ptr: 
@len: 
@str: 
@Returns: 


<!-- ##### FUNCTION e2k_rule_append_binary ##### -->
<para>

</para>

@ba: 
@data: 


<!-- ##### FUNCTION e2k_rule_extract_binary ##### -->
<para>

</para>

@ptr: 
@len: 
@data: 
@Returns: 


